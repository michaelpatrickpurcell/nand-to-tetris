class Board {
    field Edge e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee;
    field Vert v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, va, vb, vc, vd, ve, vf, v10, v11, v12, v13;

    field Array e;
    field Array v;

    field Array hits;

    field Cell c00, c01, c02, c03;
    field Cell c10, c11, c12, c13;
    field Cell c20, c21, c22, c23;
    field Cell c30, c31, c32, c33;
    field Cell c40, c41, c42, c43;
    field Cell c50, c51, c52, c53;
    field Cell c60, c61, c62, c63;
    field Cell c70, c71, c72, c73;
    field Cell c80, c81, c82, c83;
    field Cell c90, c91, c92, c93;
    field Cell ca0, ca1, ca2, ca3;
    field Cell cb0, cb1, cb2, cb3;
    field Cell cc0, cc1, cc2, cc3;
    field Cell cd0, cd1, cd2, cd3;
    field Cell ce0, ce1, ce2, ce3;

    field int x_off, y_off;

    constructor Board new(int x_offset, int y_offset) {

        let c00 = Cell.new(x_offset + (4*16), y_offset + (0*16));
        let c01 = Cell.new(x_offset + (6*16), y_offset + (0*16));
        let c02 = Cell.new(x_offset + (13*16), y_offset + (0*16));
        let c03 = Cell.new(x_offset + (14*16), y_offset + (0*16));

        let c10 = Cell.new(x_offset + (9*16), y_offset + (1*16));
        let c11 = Cell.new(x_offset + (14*16), y_offset + (1*16));
        let c12 = Cell.new(x_offset + (16*16), y_offset + (1*16));
        let c13 = Cell.new(x_offset + (19*16), y_offset + (1*16));

        let c20 = Cell.new(x_offset + (0*16), y_offset + (2*16));
        let c21 = Cell.new(x_offset + (4*16), y_offset + (2*16));
        let c22 = Cell.new(x_offset + (10*16), y_offset + (2*16));
        let c23 = Cell.new(x_offset + (19*16), y_offset + (2*16));

        let c30 = Cell.new(x_offset + (0*16), y_offset + (3*16));
        let c31 = Cell.new(x_offset + (1*16), y_offset + (3*16));
        let c32 = Cell.new(x_offset + (13*16), y_offset + (3*16));
        let c33 = Cell.new(x_offset + (16*16), y_offset + (3*16));

        let c40 = Cell.new(x_offset + (1*16), y_offset + (4*16));
        let c41 = Cell.new(x_offset + (6*16), y_offset + (4*16));
        let c42 = Cell.new(x_offset + (9*16), y_offset + (4*16));
        let c43 = Cell.new(x_offset + (10*16), y_offset + (4*16));

        let c50 = Cell.new(x_offset + (2*16), y_offset + (5*16));
        let c51 = Cell.new(x_offset + (11*16), y_offset + (5*16));
        let c52 = Cell.new(x_offset + (14*16), y_offset + (5*16));
        let c53 = Cell.new(x_offset + (18*16), y_offset + (5*16));

        let c60 = Cell.new(x_offset + (2*16), y_offset + (6*16));
        let c61 = Cell.new(x_offset + (4*16), y_offset + (6*16));
        let c62 = Cell.new(x_offset + (5*16), y_offset + (6*16));
        let c63 = Cell.new(x_offset + (7*16), y_offset + (6*16));

        let c70 = Cell.new(x_offset + (7*16), y_offset + (7*16));
        let c71 = Cell.new(x_offset + (13*16), y_offset + (7*16));
        let c72 = Cell.new(x_offset + (15*16), y_offset + (7*16));
        let c73 = Cell.new(x_offset + (18*16), y_offset + (7*16));

        let c80 = Cell.new(x_offset + (5*16), y_offset + (8*16));
        let c81 = Cell.new(x_offset + (6*16), y_offset + (8*16));
        let c82 = Cell.new(x_offset + (11*16), y_offset + (8*16));
        let c83 = Cell.new(x_offset + (15*16), y_offset + (8*16));

        let c90 = Cell.new(x_offset + (2*16), y_offset + (9*16));
        let c91 = Cell.new(x_offset + (8*16), y_offset + (9*16));
        let c92 = Cell.new(x_offset + (12*16), y_offset + (9*16));
        let c93 = Cell.new(x_offset + (19*16), y_offset + (9*16));

        let ca0 = Cell.new(x_offset + (3*16), y_offset + (10*16));
        let ca1 = Cell.new(x_offset + (12*16), y_offset + (10*16));
        let ca2 = Cell.new(x_offset + (16*16), y_offset + (10*16));
        let ca3 = Cell.new(x_offset + (18*16), y_offset + (10*16));

        let cb0 = Cell.new(x_offset + (3*16), y_offset + (11*16));
        let cb1 = Cell.new(x_offset + (8*16), y_offset + (11*16));
        let cb2 = Cell.new(x_offset + (9*16), y_offset + (11*16));
        let cb3 = Cell.new(x_offset + (11*16), y_offset + (11*16));

        let cc0 = Cell.new(x_offset + (0*16), y_offset + (12*16));
        let cc1 = Cell.new(x_offset + (7*16), y_offset + (12*16));
        let cc2 = Cell.new(x_offset + (12*16), y_offset + (12*16));
        let cc3 = Cell.new(x_offset + (17*16), y_offset + (12*16));

        let cd0 = Cell.new(x_offset + (5*16), y_offset + (13*16));
        let cd1 = Cell.new(x_offset + (8*16), y_offset + (13*16));
        let cd2 = Cell.new(x_offset + (10*16), y_offset + (13*16));
        let cd3 = Cell.new(x_offset + (17*16), y_offset + (13*16));

        let ce0 = Cell.new(x_offset + (1*16), y_offset + (14*16));
        let ce1 = Cell.new(x_offset + (3*16), y_offset + (14*16));
        let ce2 = Cell.new(x_offset + (15*16), y_offset + (14*16));
        let ce3 = Cell.new(x_offset + (17*16), y_offset + (14*16));

        let e = Array.new(15);
        let e[0] = Edge.new(c00, c01, c02, c03);
        let e[1] = Edge.new(c10, c11, c12, c13);
        let e[2] = Edge.new(c20, c21, c22, c23);
        let e[3] = Edge.new(c30, c31, c32, c33);
        let e[4] = Edge.new(c40, c41, c42, c43);
        let e[5] = Edge.new(c50, c51, c52, c53);
        let e[6] = Edge.new(c60, c61, c62, c63);
        let e[7] = Edge.new(c70, c71, c72, c73);
        let e[8] = Edge.new(c80, c81, c82, c83);
        let e[9] = Edge.new(c90, c91, c92, c93);
        let e[10] = Edge.new(ca0, ca1, ca2, ca3);
        let e[11] = Edge.new(cb0, cb1, cb2, cb3);
        let e[12] = Edge.new(cc0, cc1, cc2, cc3);
        let e[13] = Edge.new(cd0, cd1, cd2, cd3);
        let e[14] = Edge.new(ce0, ce1, ce2, ce3);

        let v = Array.new(20);
        let v[0] = Vert.new(c20, c30, cc0, 2, 3, 12);
        let v[1] = Vert.new(c31, c40, ce0, 3, 4, 14);
        let v[2] = Vert.new(c50, c60, c90, 5, 6, 9);
        let v[3] = Vert.new(ca0, cb0, ce1, 10, 11, 14);
        let v[4] = Vert.new(c00, c21, c61, 0, 2, 6);
        let v[5] = Vert.new(c62, c80, cd0, 6, 8, 13);
        let v[6] = Vert.new(c01, c41, c81, 0, 4, 8);
        let v[7] = Vert.new(c63, c70, cc1, 6, 7, 12);
        let v[8] = Vert.new(c91, cb1, cd1, 9, 11, 13);
        let v[9] = Vert.new(c10, c42, cb2, 1, 4, 11);
        let v[10] = Vert.new(c22, c43, cd2, 2, 4, 13);
        let v[11] = Vert.new(c51, c82, cb3, 5, 8, 11);
        let v[12] = Vert.new(c92, ca1, cc2, 9, 10, 12);
        let v[13] = Vert.new(c02, c32, c71, 0, 3, 7);
        let v[14] = Vert.new(c03, c11, c52, 0, 1, 5);
        let v[15] = Vert.new(c72, c83, ce2, 7, 8, 14);
        let v[16] = Vert.new(c12, c33, ca2, 1, 3, 10);
        let v[17] = Vert.new(cc3, cd3, ce3, 12, 13, 14);
        let v[18] = Vert.new(c53, c73, ca3, 5, 7, 10);
        let v[19] = Vert.new(c13, c23, c93, 1, 2, 9);

        let x_off = x_offset;
        let y_off = y_offset;

        let hits = Array.new(20);

        return this; 
    }

    method void draw_borders() {
        var int i;
        var Edge temp_edge;
        var Vert temp_vert;

        let i = 0;
        while (i < 15) {
            let temp_edge = e[i];
            do temp_edge.draw_borders();
            let i = i + 1;
        }
        
        let i = 0;
        while (i < 20) {
            let temp_vert = v[i];
            do temp_vert.draw_borders();
            let i = i + 1;
        }
        return;
    }

    method void clear_text() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,160,256);
        do Screen.setColor(true);
        return;
    }

    method void print_scores(int score_p1, int score_p2) {
        do Output.moveCursor(20,0);
        do Output.printString("Scores");
        do Output.println();
        do Output.printString("Player 1: ");
        do Output.printInt(score_p1);
        do Output.println();
        do Output.printString("Player 2: ");
        do Output.printInt(score_p2);
        do Output.println();
        return;
    }

    method void fill_diamond(int i) {
        var Edge temp_edge;
        let temp_edge = e[i];
        do temp_edge.fill_diamond();
        return;
    }

    method void fill_cross(int i) {
        var Edge temp_edge;
        let temp_edge = e[i];
        do temp_edge.fill_cross();
        return;
    }

    method void check_triangles() {
        var Vert temp_vert;
        var int i;
        var int triangle;

        let i = 0;
        while (i < 20) {
            let temp_vert = v[i];
            let triangle = temp_vert.check_triangle();
            let hits[i] = triangle;
            let i = i + 1;
        }
        return;
    }

    method int score_hits(int target) {
        var int accum;
        var int i;

        let accum = 0;
        let i = 0;
        while (i < 20) {
            if (hits[i] = target) {
                let accum = accum + 1;
            }
            let i = i + 1;
        }
        return ((accum * (accum + 1)) / 2);
    }

    method void print_hits() {
        var int i;
        let i = 0;
        while (i < 20) {
            do Output.printInt(hits[i]);
            let i = i + 1;
        }
        return;
    }

    method void clear_hits() {
        var int i, j;
        var int h;
        var Vert temp_v;
        var Edge temp_e;

        let i = 0;
        while (i < 20) {
            let h = hits[i];
            if (~(h = 0)) {
                let temp_v = v[i];
                let j = temp_v.get_r0();
                let temp_e = e[j];
                do temp_e.clear_cells();
                let j = temp_v.get_r1();
                let temp_e = e[j];
                do temp_e.clear_cells();
                let j = temp_v.get_r2();
                let temp_e = e[j];
                do temp_e.clear_cells();

            }
            let hits[i] = 0;
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        var Edge temp_edge;
        var Vert temp_vert;
        var int i;

        let i = 0;
        while (i < 15) {
            let temp_edge = e[i];
            do temp_edge.dispose();
            let i = i + 1;
        }

        let i = 0;
        while (i < 20) {
            let temp_vert = v[i];
            do temp_vert.dispose();
            let i = i + 1;
        }

        do e.dispose();
        do v.dispose();
        do Memory.deAlloc(this);
        return;
    }

}